// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model user{
  id  BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  firstname String 
  middleName String
  lastName String 
  mobile String
  email String
  passwordHash String
  registered DateTime @db.DateTime()
  lastLogin DateTime @db.DateTime()
  intro  String @db.TinyText
  profile String @db.Text
  post post[]
}

model post{
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  authorId BigInt @db.UnsignedBigInt
  //parentId BigInt @db.UnsignedBigInt
  title String
  metaTitle String
  slug String
  summary String @db.TinyText
  published Int @db.TinyInt()
  createdAt DateTime @db.DateTime()
  updatedAt DateTime @db.DateTime()
  publishedAt DateTime @db.DateTime()
  content String @db.Text
  user user @relation(fields: [authorId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  post_comment post_comment[]
  post_tag post_tag[]
  post_meta post_meta[]
  post_category post_category[]
  }

  model post_comment{
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  postId BigInt  @db.UnsignedBigInt
  //parentId BigInt @db.UnsignedBigInt
  title String
  published Int @db.TinyInt()
   updatedAt DateTime @db.DateTime()
  publishedAt DateTime @db.DateTime()
  content String @db.Text
  post post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  }

  model tag {
    id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
    title String
    metaTitle String
    slug String
    content String @db.Text
    post_tag post_tag[]
  }

model post_tag {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  postId BigInt @db.UnsignedBigInt
  tagId BigInt  @db.UnsignedBigInt
  
  
  post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tag tag @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
}

  model post_meta{

  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  postId BigInt  @db.UnsignedBigInt
  key String
  content String @db.Text
  post post @relation(fields: [postId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  }

model post_category {
  id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
    postId BigInt  @db.UnsignedBigInt
    categoryId BigInt @db.UnsignedBigInt
    
    post post @relation(fields: [postId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    category category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
     
}


  model category{
    id BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  //parentId BigInt @db.UnsignedBigInt
  title String
  metaTitle String
  slug String
  content String @db.Text
  post_category post_category[]
  }
